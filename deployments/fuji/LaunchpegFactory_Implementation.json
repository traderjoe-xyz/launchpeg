{
  "address": "0x4aC384ccad800711482D133A3C8d4Ec81B7d64e0",
  "abi": [
    {
      "inputs": [],
      "name": "LaunchpegFactory__InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidJoeFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPercent",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flatLaunchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBatchSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForDevs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForAllowlist",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchRevealSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealInterval",
          "type": "uint256"
        }
      ],
      "name": "FlatLaunchpegCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "launchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBatchSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForAuction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForAllowlist",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForDevs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchRevealSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealInterval",
          "type": "uint256"
        }
      ],
      "name": "LaunchpegCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "SetDefaultJoeFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "joeFeePercent",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultJoeFeePercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flatLaunchpegImplementation",
          "type": "address"
        }
      ],
      "name": "SetFlatLaunchpegImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "launchpegImplementation",
          "type": "address"
        }
      ],
      "name": "SetLaunchpegImplementation",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allLaunchpegs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchRevealSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revealStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revealInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILaunchpegFactory.BatchReveal",
          "name": "_batchRevealData",
          "type": "tuple"
        }
      ],
      "name": "createFlatLaunchpeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAuction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchRevealSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revealStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revealInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILaunchpegFactory.BatchReveal",
          "name": "_batchRevealData",
          "type": "tuple"
        }
      ],
      "name": "createLaunchpeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flatLaunchpegImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpegImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_flatLaunchpegImplementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLaunchpeg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_launchpegType",
          "type": "uint256"
        }
      ],
      "name": "numLaunchpegs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "setDefaultJoeFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setDefaultJoeFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flatLaunchpegImplementation",
          "type": "address"
        }
      ],
      "name": "setFlatLaunchpegImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpegImplementation",
          "type": "address"
        }
      ],
      "name": "setLaunchpegImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98f11f8b6c3d9c4c6cab3e41d75ce1d866f32640f525ef390781db892f9dc21b",
  "receipt": {
    "to": null,
    "from": "0x765BB83d3252b2707AeBE3b09472322feAb0AD8E",
    "contractAddress": "0x4aC384ccad800711482D133A3C8d4Ec81B7d64e0",
    "transactionIndex": 4,
    "gasUsed": "1176556",
    "logsBloom": "0x
    "blockHash": "0x20c59284da59126e0540bc3716d2e23bc7cc21a24d11d873196632e4efc03c8b",
    "transactionHash": "0x98f11f8b6c3d9c4c6cab3e41d75ce1d866f32640f525ef390781db892f9dc21b",
    "logs": [],
    "blockNumber": 15567708,
    "cumulativeGasUsed": "2023555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "607b3ca655ce06ef5c8dd68e5fe5495c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LaunchpegFactory__InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidJoeFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPercent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flatLaunchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchRevealSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"name\":\"FlatLaunchpegCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchRevealSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"name\":\"LaunchpegCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"joeFeeCollector\",\"type\":\"address\"}],\"name\":\"SetDefaultJoeFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joeFeePercent\",\"type\":\"uint256\"}],\"name\":\"SetDefaultJoeFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flatLaunchpegImplementation\",\"type\":\"address\"}],\"name\":\"SetFlatLaunchpegImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchpegImplementation\",\"type\":\"address\"}],\"name\":\"SetLaunchpegImplementation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLaunchpegs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchRevealSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct ILaunchpegFactory.BatchReveal\",\"name\":\"_batchRevealData\",\"type\":\"tuple\"}],\"name\":\"createFlatLaunchpeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchRevealSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct ILaunchpegFactory.BatchReveal\",\"name\":\"_batchRevealData\",\"type\":\"tuple\"}],\"name\":\"createLaunchpeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatLaunchpegImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpegImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flatLaunchpegImplementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLaunchpeg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchpegType\",\"type\":\"uint256\"}],\"name\":\"numLaunchpegs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"setDefaultJoeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"}],\"name\":\"setDefaultJoeFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flatLaunchpegImplementation\",\"type\":\"address\"}],\"name\":\"setFlatLaunchpegImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpegImplementation\",\"type\":\"address\"}],\"name\":\"setLaunchpegImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_batchRevealData\":\"Contains batch reveal informations :  Size of the batch reveal, start of the token URIs reveal in seconds and interval between two batch reveals in seconds\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_maxBatchSize\":\"Max amount of NFTs that can be minted at once\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"},\"returns\":{\"_0\":\"flatLaunchpeg New FlatLaunchpeg address\"}},\"createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForAuction\":\"Amount of NFTs available for the auction (e.g 8000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_batchRevealData\":\"Contains batch reveal informations :  Size of the batch reveal, start of the token URIs reveal in seconds and interval between two batch reveals in seconds\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_maxBatchSize\":\"Max amount of NFTs that can be minted at once\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"},\"returns\":{\"_0\":\"launchpeg New Launchpeg address\"}},\"initialize(address,address,uint256,address)\":{\"details\":\"Uses clone factory pattern to save space\",\"params\":{\"_flatLaunchpegImplementation\":\"FlatLaunchpeg contract to be cloned\",\"_joeFeeCollector\":\"Default fee collector\",\"_joeFeePercent\":\"Default fee percentage\",\"_launchpegImplementation\":\"Launchpeg contract to be cloned\"}},\"numLaunchpegs(uint256)\":{\"params\":{\"_launchpegType\":\"Type of Launchpeg to consider\"},\"returns\":{\"_0\":\"LaunchpegNumber The number of Launchpegs ever created\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDefaultJoeFeeCollector(address)\":{\"params\":{\"_joeFeeCollector\":\"New collector address\"}},\"setDefaultJoeFeePercent(uint256)\":{\"params\":{\"_joeFeePercent\":\"New joeFeePercent\"}},\"setFlatLaunchpegImplementation(address)\":{\"params\":{\"_flatLaunchpegImplementation\":\"New flatLaunchpegImplementation\"}},\"setLaunchpegImplementation(address)\":{\"params\":{\"_launchpegImplementation\":\"New launchpegImplementation\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"joeFeePercent\":{\"details\":\"In basis points e.g 100 for 1%\"}},\"title\":\"Launchpeg Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allLaunchpegs(uint256,uint256)\":{\"notice\":\"Launchpegs address list by type of Launchpeg\"},\"createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))\":{\"notice\":\"FlatLaunchpeg creation\"},\"createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))\":{\"notice\":\"Launchpeg creation\"},\"flatLaunchpegImplementation()\":{\"notice\":\"FlatLaunchpeg contract to be cloned\"},\"initialize(address,address,uint256,address)\":{\"notice\":\"Initializes the Launchpeg factory\"},\"isLaunchpeg(uint256,address)\":{\"notice\":\"Checks if an address is stored as a Launchpeg, by type of Launchpeg\"},\"joeFeeCollector()\":{\"notice\":\"Default fee collector\"},\"joeFeePercent()\":{\"notice\":\"Default fee percentage\"},\"launchpegImplementation()\":{\"notice\":\"Launchpeg contract to be cloned\"},\"numLaunchpegs(uint256)\":{\"notice\":\"Returns the number of Launchpegs\"},\"setDefaultJoeFeeCollector(address)\":{\"notice\":\"Set default address to collect protocol fees\"},\"setDefaultJoeFeePercent(uint256)\":{\"notice\":\"Set percentage of protocol fees\"},\"setFlatLaunchpegImplementation(address)\":{\"notice\":\"Set address for flatLaunchpegImplementation\"},\"setLaunchpegImplementation(address)\":{\"notice\":\"Set address for launchpegImplementation\"}},\"notice\":\"Factory that creates Launchpeg contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpegFactory.sol\":\"LaunchpegFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nerror LaunchpegFactory__InvalidImplementation();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__CanOnlyMintMultipleOfMaxBatchSize();\\nerror Launchpeg__EndPriceGreaterThanStartPrice();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__JoeFeeAlreadyInitialized();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidStartTime();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxBatchSize();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__AllowlistBeforeAuction();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__PublicSaleBeforeAllowlist();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\",\"keccak256\":\"0xac319186bdeeaa4eb95faab37640619bcf54916fba01eec8544363d00e158e19\",\"license\":\"MIT\"},\"contracts/LaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport \\\"./interfaces/ILaunchpegFactory.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./LaunchpegErrors.sol\\\";\\n\\n/// @title Launchpeg Factory\\n/// @author Trader Joe\\n/// @notice Factory that creates Launchpeg contracts\\ncontract LaunchpegFactory is\\n    ILaunchpegFactory,\\n    Initializable,\\n    OwnableUpgradeable\\n{\\n    event LaunchpegCreated(\\n        address indexed launchpeg,\\n        string name,\\n        string symbol,\\n        address indexed projectOwner,\\n        address indexed royaltyReceiver,\\n        uint256 maxBatchSize,\\n        uint256 collectionSize,\\n        uint256 amountForAuction,\\n        uint256 amountForAllowlist,\\n        uint256 amountForDevs,\\n        uint256 batchRevealSize,\\n        uint256 revealStartTime,\\n        uint256 revealInterval\\n    );\\n\\n    event FlatLaunchpegCreated(\\n        address indexed flatLaunchpeg,\\n        string name,\\n        string symbol,\\n        address indexed projectOwner,\\n        address indexed royaltyReceiver,\\n        uint256 maxBatchSize,\\n        uint256 collectionSize,\\n        uint256 amountForDevs,\\n        uint256 amountForAllowlist,\\n        uint256 batchRevealSize,\\n        uint256 revealStartTime,\\n        uint256 revealInterval\\n    );\\n\\n    event SetLaunchpegImplementation(address indexed launchpegImplementation);\\n    event SetFlatLaunchpegImplementation(\\n        address indexed flatLaunchpegImplementation\\n    );\\n    event SetDefaultJoeFeePercent(uint256 joeFeePercent);\\n    event SetDefaultJoeFeeCollector(address indexed joeFeeCollector);\\n\\n    /// @notice Launchpeg contract to be cloned\\n    address public override launchpegImplementation;\\n    /// @notice FlatLaunchpeg contract to be cloned\\n    address public override flatLaunchpegImplementation;\\n\\n    /// @notice Default fee percentage\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public override joeFeePercent;\\n    /// @notice Default fee collector\\n    address public override joeFeeCollector;\\n\\n    /// @notice Checks if an address is stored as a Launchpeg, by type of Launchpeg\\n    mapping(uint256 => mapping(address => bool)) public override isLaunchpeg;\\n    /// @notice Launchpegs address list by type of Launchpeg\\n    mapping(uint256 => address[]) public override allLaunchpegs;\\n\\n    /// @notice Initializes the Launchpeg factory\\n    /// @dev Uses clone factory pattern to save space\\n    /// @param _launchpegImplementation Launchpeg contract to be cloned\\n    /// @param _flatLaunchpegImplementation FlatLaunchpeg contract to be cloned\\n    /// @param _joeFeePercent Default fee percentage\\n    /// @param _joeFeeCollector Default fee collector\\n    function initialize(\\n        address _launchpegImplementation,\\n        address _flatLaunchpegImplementation,\\n        uint256 _joeFeePercent,\\n        address _joeFeeCollector\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        if (_launchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n        if (_flatLaunchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n        if (_joeFeePercent > 10_000) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n\\n        launchpegImplementation = _launchpegImplementation;\\n        flatLaunchpegImplementation = _flatLaunchpegImplementation;\\n        joeFeePercent = _joeFeePercent;\\n        joeFeeCollector = _joeFeeCollector;\\n    }\\n\\n    /// @notice Returns the number of Launchpegs\\n    /// @param _launchpegType Type of Launchpeg to consider\\n    /// @return LaunchpegNumber The number of Launchpegs ever created\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allLaunchpegs[_launchpegType].length;\\n    }\\n\\n    /// @notice Launchpeg creation\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _batchRevealData Contains batch reveal informations :\\n    ///  Size of the batch reveal, start of the token URIs reveal in seconds\\n    /// and interval between two batch reveals in seconds\\n    /// @return launchpeg New Launchpeg address\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        BatchReveal calldata _batchRevealData\\n    ) external override onlyOwner returns (address) {\\n        address launchpeg = Clones.clone(launchpegImplementation);\\n\\n        isLaunchpeg[0][launchpeg] = true;\\n        allLaunchpegs[0].push(launchpeg);\\n\\n        ILaunchpeg(launchpeg).initialize(\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForAuction,\\n            _amountForAllowlist,\\n            _amountForDevs,\\n            _batchRevealData.batchRevealSize,\\n            _batchRevealData.revealStartTime,\\n            _batchRevealData.revealInterval\\n        );\\n\\n        IBaseLaunchpeg(launchpeg).initializeJoeFee(\\n            joeFeePercent,\\n            joeFeeCollector\\n        );\\n\\n        OwnableUpgradeable(launchpeg).transferOwnership(msg.sender);\\n\\n        emit LaunchpegCreated(\\n            launchpeg,\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForAuction,\\n            _amountForAllowlist,\\n            _amountForDevs,\\n            _batchRevealData.batchRevealSize,\\n            _batchRevealData.revealStartTime,\\n            _batchRevealData.revealInterval\\n        );\\n\\n        return launchpeg;\\n    }\\n\\n    /// @notice FlatLaunchpeg creation\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _batchRevealData Contains batch reveal informations :\\n    ///  Size of the batch reveal, start of the token URIs reveal in seconds\\n    /// and interval between two batch reveals in seconds\\n    /// @return flatLaunchpeg New FlatLaunchpeg address\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        BatchReveal calldata _batchRevealData\\n    ) external override onlyOwner returns (address) {\\n        address flatLaunchpeg = Clones.clone(flatLaunchpegImplementation);\\n\\n        isLaunchpeg[1][flatLaunchpeg] = true;\\n        allLaunchpegs[1].push(flatLaunchpeg);\\n\\n        IFlatLaunchpeg(flatLaunchpeg).initialize(\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForDevs,\\n            _amountForAllowlist,\\n            _batchRevealData.batchRevealSize,\\n            _batchRevealData.revealStartTime,\\n            _batchRevealData.revealInterval\\n        );\\n\\n        IBaseLaunchpeg(flatLaunchpeg).initializeJoeFee(\\n            joeFeePercent,\\n            joeFeeCollector\\n        );\\n\\n        OwnableUpgradeable(flatLaunchpeg).transferOwnership(msg.sender);\\n\\n        emit FlatLaunchpegCreated(\\n            flatLaunchpeg,\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForDevs,\\n            _amountForAllowlist,\\n            _batchRevealData.batchRevealSize,\\n            _batchRevealData.revealStartTime,\\n            _batchRevealData.revealInterval\\n        );\\n\\n        return flatLaunchpeg;\\n    }\\n\\n    /// @notice Set address for launchpegImplementation\\n    /// @param _launchpegImplementation New launchpegImplementation\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_launchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n\\n        launchpegImplementation = _launchpegImplementation;\\n        emit SetLaunchpegImplementation(_launchpegImplementation);\\n    }\\n\\n    /// @notice Set address for flatLaunchpegImplementation\\n    /// @param _flatLaunchpegImplementation New flatLaunchpegImplementation\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external override onlyOwner {\\n        if (_flatLaunchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n\\n        flatLaunchpegImplementation = _flatLaunchpegImplementation;\\n        emit SetFlatLaunchpegImplementation(_flatLaunchpegImplementation);\\n    }\\n\\n    /// @notice Set percentage of protocol fees\\n    /// @param _joeFeePercent New joeFeePercent\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_joeFeePercent > 10_000) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n\\n        joeFeePercent = _joeFeePercent;\\n        emit SetDefaultJoeFeePercent(_joeFeePercent);\\n    }\\n\\n    /// @notice Set default address to collect protocol fees\\n    /// @param _joeFeeCollector New collector address\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n\\n        joeFeeCollector = _joeFeeCollector;\\n        emit SetDefaultJoeFeeCollector(_joeFeeCollector);\\n    }\\n}\\n\",\"keccak256\":\"0x88aaa99c30f474065b75bf4949ac992191cd68f4b31e5dd0d57a432c7df5282d\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        Allowlist,\\n        PublicSale\\n    }\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxBatchSize() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function projectOwner() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setProjectOwner(address _projectOwner) external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function revealNextBatch() external;\\n\\n    function forceReveal() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n}\\n\",\"keccak256\":\"0xf56799cd03d5b2a3eae98a22d6ef11fca686822dc3aa30f044c21950bc589df4\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    struct FlatLaunchpegPrices {\\n        uint256 salePrice;\\n        uint256 allowlistPrice;\\n    }\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        uint256 _batchRevealSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0x202939f3f1a0271f80d52b3de33f0d698a255faf4a09c7c1846a37f2ba20cab3\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        uint256 _batchRevealSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAllowlistPrice() external view returns (uint256);\\n\\n    function getPublicSalePrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fdf18189b049555f5e274d7fefae1ac8eddb503e19219f7c8a6ed2b32851735\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ILaunchpegFactory\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of LaunchpegFactory\\ninterface ILaunchpegFactory {\\n    struct BatchReveal {\\n        uint256 batchRevealSize;\\n        uint256 revealStartTime;\\n        uint256 revealInterval;\\n    }\\n\\n    function launchpegImplementation() external view returns (address);\\n\\n    function flatLaunchpegImplementation() external view returns (address);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function isLaunchpeg(uint256 _type, address _contract)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\\n        external\\n        view\\n        returns (address);\\n\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        BatchReveal calldata _batchRevealData\\n    ) external returns (address);\\n\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        BatchReveal calldata _batchRevealData\\n    ) external returns (address);\\n\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external;\\n\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external;\\n\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\\n\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\\n}\\n\",\"keccak256\":\"0x4e01c0bc21dcf5365bb816d91c0b4229df848d629f6c8ae78ca9a2929e41e5be\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80637cbe8d67116100a2578063abcc761711610071578063abcc761714610221578063be2030941461025f578063c5482fe314610272578063def041dc1461027b578063f2fde38b1461028e57600080fd5b80637cbe8d67146101d75780638bb4ee24146101ea5780638da5cb5b146101fd578063954e75c51461020e57600080fd5b806358dc9a55116100de57806358dc9a551461017b5780635bb213761461018e578063715018a6146101a1578063776f1b1c146101a957600080fd5b80632265708a14610110578063306ec7481461012557806337daf4ca1461015557806353edb42614610168575b600080fd5b61012361011e36600461110b565b6102a1565b005b610138610133366004611150565b610332565b6040516001600160a01b0390911681526020015b60405180910390f35b606654610138906001600160a01b031681565b610123610176366004610f15565b61036a565b610138610189366004610f84565b610405565b606854610138906001600160a01b031681565b6101236106b6565b6101c96101b736600461110b565b6000908152606a602052604090205490565b60405190815260200161014c565b6101236101e5366004610f15565b6106ec565b606554610138906001600160a01b031681565b6033546001600160a01b0316610138565b61012361021c366004610f15565b610787565b61024f61022f366004611124565b606960209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161014c565b61012361026d366004610f37565b610822565b6101c960675481565b610138610289366004611042565b6109c1565b61012361029c366004610f15565b610c75565b6033546001600160a01b031633146102d45760405162461bcd60e51b81526004016102cb90611387565b60405180910390fd5b6127108111156102f7576040516346b7d95d60e11b815260040160405180910390fd5b60678190556040518181527f4745ea19c676a0945640ec34419fe0680d70511432fc85a2d605840ab568e6329060200160405180910390a150565b606a602052816000526040600020818154811061034e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6033546001600160a01b031633146103945760405162461bcd60e51b81526004016102cb90611387565b6001600160a01b0381166103bb57604051631a1b629760e21b815260040160405180910390fd5b606880546001600160a01b0319166001600160a01b0383169081179091556040517fe641fd1cd94961ec6280816da07b756907548d41a011cad54123b611f984242f90600090a250565b6033546000906001600160a01b031633146104325760405162461bcd60e51b81526004016102cb90611387565b60665460009061044a906001600160a01b0316610d10565b9050600160696000600181526020019081526020016000206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550606a600060018152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b03166379fecd178c8c8c8c8c8c8c8c8c600001358d602001358e604001356040518c63ffffffff1660e01b81526004016105439b9a999897969594939291906111bf565b600060405180830381600087803b15801561055d57600080fd5b505af1158015610571573d6000803e3d6000fd5b505060675460685460405163ecbbfea360e01b815260048101929092526001600160a01b0390811660248301528416925063ecbbfea39150604401600060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b0316826001600160a01b03167faff48a92308e00f59aa5f7c8147c11b228ab95eddbd734dfd179636c8fee700f8e8e8c8c8c8c8c600001358d602001358e604001356040516106a0999897969594939291906112bc565b60405180910390a49a9950505050505050505050565b6033546001600160a01b031633146106e05760405162461bcd60e51b81526004016102cb90611387565b6106ea6000610dad565b565b6033546001600160a01b031633146107165760405162461bcd60e51b81526004016102cb90611387565b6001600160a01b03811661073d57604051637c14876160e01b815260040160405180910390fd5b606680546001600160a01b0319166001600160a01b0383169081179091556040517f8549b2b39c65a9c4ca6b1037f64209a139ef0fc440cd914c14088dd2a368287c90600090a250565b6033546001600160a01b031633146107b15760405162461bcd60e51b81526004016102cb90611387565b6001600160a01b0381166107d857604051637c14876160e01b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b0383169081179091556040517f8084d0fd0870539f0703b9cf74b2618239081b020be6da48c74b2a6ab670dcfb90600090a250565b600054610100900460ff1661083d5760005460ff1615610841565b303b155b6108a45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102cb565b600054610100900460ff161580156108c6576000805461ffff19166101011790555b6108ce610dff565b6001600160a01b0385166108f557604051637c14876160e01b815260040160405180910390fd5b6001600160a01b03841661091c57604051637c14876160e01b815260040160405180910390fd5b61271083111561093f576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b03821661096657604051631a1b629760e21b815260040160405180910390fd5b606580546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067859055606880549285169290911691909117905580156109ba576000805461ff00191690555b5050505050565b6033546000906001600160a01b031633146109ee5760405162461bcd60e51b81526004016102cb90611387565b606554600090610a06906001600160a01b0316610d10565b90506001606960008081526020019081526020016000206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550606a6000808152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b031663c4008e6f8d8d8d8d8d8d8d8d8d8d600001358e602001358f604001356040518d63ffffffff1660e01b8152600401610aff9c9b9a9998979695949392919061123b565b600060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b505060675460685460405163ecbbfea360e01b815260048101929092526001600160a01b0390811660248301528416925063ecbbfea39150604401600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b0316826001600160a01b03167f3c07ac8c5cc59c5ee57f555dbce1b25099aca7e47c9c108ccab97ae28349044c8f8f8d8d8d8d8d8d600001358e602001358f60400135604051610c5e9a9998979695949392919061131d565b60405180910390a49b9a5050505050505050505050565b6033546001600160a01b03163314610c9f5760405162461bcd60e51b81526004016102cb90611387565b6001600160a01b038116610d045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102cb565b610d0d81610dad565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610da85760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102cb565b919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610e265760405162461bcd60e51b81526004016102cb906113bc565b6106ea600054610100900460ff16610e505760405162461bcd60e51b81526004016102cb906113bc565b6106ea33610dad565b80356001600160a01b0381168114610da857600080fd5b600082601f830112610e8157600080fd5b813567ffffffffffffffff80821115610e9c57610e9c611407565b604051601f8301601f19908116603f01168101908282118183101715610ec457610ec4611407565b81604052838152866020858801011115610edd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060608284031215610f0f57600080fd5b50919050565b600060208284031215610f2757600080fd5b610f3082610e59565b9392505050565b60008060008060808587031215610f4d57600080fd5b610f5685610e59565b9350610f6460208601610e59565b925060408501359150610f7960608601610e59565b905092959194509250565b60008060008060008060008060006101608a8c031215610fa357600080fd5b893567ffffffffffffffff80821115610fbb57600080fd5b610fc78d838e01610e70565b9a5060208c0135915080821115610fdd57600080fd5b50610fea8c828d01610e70565b985050610ff960408b01610e59565b965061100760608b01610e59565b955060808a0135945060a08a0135935060c08a0135925060e08a013591506110338b6101008c01610efd565b90509295985092959850929598565b6000806000806000806000806000806101808b8d03121561106257600080fd5b8a3567ffffffffffffffff8082111561107a57600080fd5b6110868e838f01610e70565b9b5060208d013591508082111561109c57600080fd5b506110a98d828e01610e70565b9950506110b860408c01610e59565b97506110c660608c01610e59565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013591506110fa8c6101208d01610efd565b90509295989b9194979a5092959850565b60006020828403121561111d57600080fd5b5035919050565b6000806040838503121561113757600080fd5b8235915061114760208401610e59565b90509250929050565b6000806040838503121561116357600080fd5b50508035926020909101359150565b6000815180845260005b818110156111985760208185018101518683018201520161117c565b818111156111aa576000602083870101525b50601f01601f19169290920160200192915050565b60006101608083526111d38184018f611172565b905082810360208401526111e7818e611172565b6001600160a01b039c8d1660408501529a909b16606083015250608081019790975260a087019590955260c086019390935260e0850191909152610100840152610120830152610140909101529392505050565b6101808152600061125061018083018f611172565b8281036020840152611262818f611172565b6001600160a01b039d8e1660408501529b909c16606083015250608081019890985260a088019690965260c087019490945260e0860192909252610100850152610120840152610140830152610160909101529392505050565b60006101208083526112d08184018d611172565b905082810360208401526112e4818c611172565b604084019a909a5250506060810196909652608086019490945260a085019290925260c084015260e08301526101009091015292915050565b60006101408083526113318184018e611172565b90508281036020840152611345818d611172565b604084019b909b5250506060810197909752608087019590955260a086019390935260c085019190915260e08401526101008301526101209091015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c29ee999936bc7c72e6421081be63eabdb00aa2c5e882bf1045ad01933b38a5064736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_batchRevealData": "Contains batch reveal informations :  Size of the batch reveal, start of the token URIs reveal in seconds and interval between two batch reveals in seconds",
          "_collectionSize": "The collection size (e.g 10000)",
          "_maxBatchSize": "Max amount of NFTs that can be minted at once",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        },
        "returns": {
          "_0": "flatLaunchpeg New FlatLaunchpeg address"
        }
      },
      "createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForAuction": "Amount of NFTs available for the auction (e.g 8000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_batchRevealData": "Contains batch reveal informations :  Size of the batch reveal, start of the token URIs reveal in seconds and interval between two batch reveals in seconds",
          "_collectionSize": "The collection size (e.g 10000)",
          "_maxBatchSize": "Max amount of NFTs that can be minted at once",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        },
        "returns": {
          "_0": "launchpeg New Launchpeg address"
        }
      },
      "initialize(address,address,uint256,address)": {
        "details": "Uses clone factory pattern to save space",
        "params": {
          "_flatLaunchpegImplementation": "FlatLaunchpeg contract to be cloned",
          "_joeFeeCollector": "Default fee collector",
          "_joeFeePercent": "Default fee percentage",
          "_launchpegImplementation": "Launchpeg contract to be cloned"
        }
      },
      "numLaunchpegs(uint256)": {
        "params": {
          "_launchpegType": "Type of Launchpeg to consider"
        },
        "returns": {
          "_0": "LaunchpegNumber The number of Launchpegs ever created"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDefaultJoeFeeCollector(address)": {
        "params": {
          "_joeFeeCollector": "New collector address"
        }
      },
      "setDefaultJoeFeePercent(uint256)": {
        "params": {
          "_joeFeePercent": "New joeFeePercent"
        }
      },
      "setFlatLaunchpegImplementation(address)": {
        "params": {
          "_flatLaunchpegImplementation": "New flatLaunchpegImplementation"
        }
      },
      "setLaunchpegImplementation(address)": {
        "params": {
          "_launchpegImplementation": "New launchpegImplementation"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "joeFeePercent": {
        "details": "In basis points e.g 100 for 1%"
      }
    },
    "title": "Launchpeg Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allLaunchpegs(uint256,uint256)": {
        "notice": "Launchpegs address list by type of Launchpeg"
      },
      "createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))": {
        "notice": "FlatLaunchpeg creation"
      },
      "createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256))": {
        "notice": "Launchpeg creation"
      },
      "flatLaunchpegImplementation()": {
        "notice": "FlatLaunchpeg contract to be cloned"
      },
      "initialize(address,address,uint256,address)": {
        "notice": "Initializes the Launchpeg factory"
      },
      "isLaunchpeg(uint256,address)": {
        "notice": "Checks if an address is stored as a Launchpeg, by type of Launchpeg"
      },
      "joeFeeCollector()": {
        "notice": "Default fee collector"
      },
      "joeFeePercent()": {
        "notice": "Default fee percentage"
      },
      "launchpegImplementation()": {
        "notice": "Launchpeg contract to be cloned"
      },
      "numLaunchpegs(uint256)": {
        "notice": "Returns the number of Launchpegs"
      },
      "setDefaultJoeFeeCollector(address)": {
        "notice": "Set default address to collect protocol fees"
      },
      "setDefaultJoeFeePercent(uint256)": {
        "notice": "Set percentage of protocol fees"
      },
      "setFlatLaunchpegImplementation(address)": {
        "notice": "Set address for flatLaunchpegImplementation"
      },
      "setLaunchpegImplementation(address)": {
        "notice": "Set address for launchpegImplementation"
      }
    },
    "notice": "Factory that creates Launchpeg contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 238,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 241,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1027,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 211,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4550,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "launchpegImplementation",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 4554,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "flatLaunchpegImplementation",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 4558,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "joeFeePercent",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 4562,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "joeFeeCollector",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 4570,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "isLaunchpeg",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4577,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "allLaunchpegs",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}